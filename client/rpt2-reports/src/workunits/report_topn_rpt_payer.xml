<workunit>
    <invokers>
        <invoker folderid="/explorer/report/landtax" action="init" caption="Top N Realty Tax Payer" target="window" index="100" role="LANDTAX" permission="landtax.topnrptpayer" />
        
        <invoker type="formActions"     action="_close" caption="Back" mnemonic="b" shortcut="ctrl + B" icon="images/back.png"/>
        <invoker type="formActions"     action="preview" caption="Preview" mnemonic="v"             icon="images/doc-view.png"/>
        <invoker type="previewActions"  action="back" caption="Back" icon="images/back.png" immediate="true" />
    </invokers>
    <code>
<![CDATA[

import com.rameses.rcp.common.*;
import com.rameses.rcp.annotations.*;
import com.rameses.osiris2.client.*;
import com.rameses.osiris2.reports.*;
import com.rameses.rcp.framework.TaskManager;

class TopNRPTPayerController
{
    @Binding
    def binding
    
    @Service("ReportParameterService")
    def svcParams;
    
    @Service('RPTReportService') 
    def svc 
    
    @Service('DateService')
    def dtSvc
    
    def year 
    def rputype = 'land'
    def topn = 20
    def reportdata
    def msg 
    def taskmgr
    def mode 
    
    void init() {
        mode = 'init' 
        year = dtSvc.getServerYear()
        reportdata = []
        taskmgr = new TaskManager()
    }
    
    def updateMessage = { msg ->
        this.msg = msg
        binding.refresh('msg')
    }
    
    def oncomplete = { data ->
        mode = 'init' 
        reportdata = data
        if( reportdata ) {
            generateReport()
            binding.fireNavigation('preview')
        }
        else {
            binding.refresh('.*')
            MsgBox.alert('No records found.')
        }
    }
    
    void preview() {
        mode = 'preview' 
        reportdata= []
        taskmgr.addTask( new TopNPayerTask( svc:svc, year:year, rputype:rputype, topn:topn, updateMessage:updateMessage, oncomplete:oncomplete ) );
        taskmgr.start()
    }
    
    void generateReport() {
        report.viewReport()
    }
    
    void print(){
        generateReport()
        ReportUtil.print( report.report, true )
    }
    
    def report = [
        getReportName : { 'topn_rpt_payer' },
        getReportData : { return reportdata },
        getParameters : { 
            def params = svcParams.getStandardParameter( OsirisContext.env.USERNAME ); 
            params.TITLE = 'Top ' + topn + ' Realty Tax Payer (' + getRpuTypeInfo() + ')'
            params.YEAR = year 
            return params 
        }
    ] as ServerReportModel;
        
    def back() {
        return 'default' 
    }
    
    def getRpuTypeInfo(){
        if( rputype == 'bldg' ) return 'BUILDING'
        if( rputype == 'mach' ) return 'MACHINERY'
        if( rputype == 'plantttree' ) return 'PLANT/TREE'
        if( rputype == 'misc' ) return 'MISCELLANEOUS'
        return 'LAND'
    }
    
    def getRpuTypes(){
        return ['land', 'bldg', 'mach', 'planttree', 'misc']
    }
    
}

class TopNPayerTask  extends com.rameses.rcp.common.Task {
    def reportdata
    def svc 
    def year
    def rputype
    def topn
    def ended = false
    def cancelled = false 
    
    def updateMessage   //handler
    def oncomplete      //handler 
    
    
    
    public boolean accept() {
       return !ended
    }
    
    public boolean isEnded() {
        return ended
    }

    public void execute() {
        reportdata = []
        updateMessage('Computing total payments by payer...')
        
        def payors = svc.getTopNPayerList( rputype, year, topn ) 
        rankPayors( payors )
        
        payors.each{ payor -> 
            try {
                updateMessage( 'Loading payments of ' + payor.payorname + '.')            
                def payments = svc.getTopNDetailedPayerList( rputype, year, payor.payorid ).each{ it.rank = payor.rank }
                reportdata.addAll( payments )
                try { Thread.sleep( 25 ) } catch( e ) { }
            }
            catch( ex ) {
                println '-'*50 
                ex.printStackTrace()
            }
        }
        ended = true 
        updateMessage('')
        oncomplete( reportdata )
    }
    
    void rankPayors( payors ){
        def rank = 0
        def prevpayorid = ''
        
        payors.each{ 
            if ( prevpayorid == it.payorid ){
                it.rank = rank 
            }    
            else if( rank < topn ){
                rank++
                it.rank = rank 
                prevpayorid = it.payorid
            }
        }
        
        //remove unrank payors
        def unrankPayors = payors.findAll{ it.rank == null }
        payors.removeAll( unrankPayors )
    }
    
}


]]>        
        
    </code>
    <pages>
        <page template="etracs2.rpt.report.RPTTopNPayerInitPage" />
        <page name="preview" template="etracs2.common.PreviewPage" />
    </pages>
</workunit>