import com.rameses.annotations.*
import com.rameses.common.*
import java.io.StringWriter
import java.io.PrintWriter

/*
* Periodically reads sys_inbox for messages. When messages are available,
* it dispatches the message by calling MessageListenerService.onreceive
* and move the message from inbox to processedinbox 
*
* Messages bound for other recepients are automatically routed
* and delivered
*/
class InboxTask
{
    @Service('MessagingService')
    def msgSvc
	
	def INBOX_SCHEMA_NAME = 'messaging:inbox' 
	def OUTBOX_SCHEMA_NAME = 'messaging:outbox' 
	
	@ProxyMethod
	public def processMessage( task ) {
		println 'Processing Inbox...'
		def msglist = msgSvc.getInboxMessages( msgSvc.getDefaultSender().id )
		msglist.each{ msg -> 
			try {
				println 'Processing inbox message[' + msg.type + ']'
				msgSvc.onMessage( msg )
				msgSvc.processedSuccessfully( msg )
			}
			catch( e ) {
				println '='*50 
				StringWriter sw = new StringWriter()
				e.printStackTrace( new PrintWriter(sw) )
				msgSvc.errorProcessing( msg, sw.toString()) 
			}	
		}
		msgSvc.moveOtherDestinationMessagesToOutbox()
        return true
	}	
}